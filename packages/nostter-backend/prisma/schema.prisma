// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UnitType {
  UnitValue
}

model Relay {
  url String @id

  EventReferenceRelation EventReferenceRelation[]
}

model Event {
  id        String   @id
  sig       String
  pubkey    String
  kind      BigInt
  tags      Json
  content   String
  createdAt DateTime

  referenceRelations_referrer EventReferenceRelation[] @relation("EventReferenceRelation_referrer")
  referenceRelations_referee  EventReferenceRelation[] @relation("EventReferenceRelation_referee")

  deletionRelations_deleter EventDeletionRelation[] @relation("EventDeletionRelation_deleter")
  deletionRealtions_deletee EventDeletionRelation[] @relation("EventDeletionRelation_deletee")

  firstDeleterEventId String?
  firstDeleterEvent   Event?  @relation("EventFirstDeletionRelation", fields: [firstDeleterEventId], references: [id])
  firstDeleteeEvents  Event[] @relation("EventFirstDeletionRelation")

  reactionRelations_reacter EventReactionRelation[] @relation("EventReactionRelation_reacter")
  reactionRelations_reactee EventReactionRelation[] @relation("EventReactionRelation_reactee")

  height BigInt @unique @default(autoincrement())

  eventReactionCountState EventReactionCountState?
}

model EventReferenceRelation {
  referrerEventId String
  refereeEventId  String

  referrerEvent Event @relation("EventReferenceRelation_referrer", fields: [referrerEventId], references: [id])
  refereeEvent  Event @relation("EventReferenceRelation_referee", fields: [refereeEventId], references: [id])

  recommendedRelayUrl String?
  recommendedRelay    Relay?  @relation(fields: [recommendedRelayUrl], references: [url])

  @@id([referrerEventId, refereeEventId])
}

model EventDeletionRelation {
  deleterEventId String
  deleteeEventId String

  deleterEvent Event @relation("EventDeletionRelation_deleter", fields: [deleterEventId], references: [id])
  deleteeEvent Event @relation("EventDeletionRelation_deletee", fields: [deleteeEventId], references: [id])

  @@id([deleterEventId, deleteeEventId])
}

model EventReactionRelation {
  reacterEventId String
  reacteeEventId String

  reacterEvent Event @relation("EventReactionRelation_reacter", fields: [reacterEventId], references: [id])
  reacteeEvent Event @relation("EventReactionRelation_reactee", fields: [reacteeEventId], references: [id])

  @@id([reacterEventId, reacteeEventId])
}

model EventResolveEventPointersState {
  id UnitType @id

  height BigInt
}

model EventReferenceRelationState {
  id UnitType @id

  height BigInt
}

model EventDeletionRelationState {
  id UnitType @id

  height BigInt
}

model EventReactionRelationState {
  id UnitType @id

  height BigInt
}

model EventReactionCountState {
  id String @id @default(uuid())

  eventId String @unique
  event   Event  @relation(fields: [eventId], references: [id])

  height BigInt

  reactionCounts Json
}
